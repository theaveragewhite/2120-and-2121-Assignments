/*
 * Name: Colton Owenby (coltono)
 * Date Submitted: Submitted 9/18/2023
 * Lab Section: 007
 * Assignment Name: Lab 2
 */

#include <string>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

//Checks order of precedence
int setPrec(char c)
{
  if(c == '*' || c == '/' || c == '%')
  {
    return 2;
  }
  else if(c == '+' || c == '-')
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

int infixToPostfix(string infix[], int length, string postfix[])
{
  stack <char> numChange;
  int postfixIndex = 0;
  char next1;
  string token;

  for(int i = 0; i < length; i++)
  {
    //Checks to see if an input is 2 digits.
    //Definitely a better way to do this as it can only do 2 digits and no more.
    token = infix[i];
    if (token.length() == 1)
    {
      next1 = token[0];
      if((next1 >= 'a' && next1 <= 'z') || (next1 >= 'A' && next1 <= 'Z') || (next1 >= '0'))
      {
        postfix[postfixIndex++] += next1;
      }
      //Checks to see if the next input is an (.
      else if(next1 == '(')
      {
        //Pushes ( onto the stack
        numChange.push('(');
      }
      //Checks to see if the next input is an ).
      else if(next1 == ')')
      {
        
        while(numChange.top() != '(' && (!numChange.empty()))
        {
          postfix[postfixIndex++] = numChange.top();
          numChange.pop();
        }

        if(!numChange.empty())
        {
          numChange.pop();
        }
        else
        {
          return 0;
        }
      }
      else
      {
        while(!numChange.empty() && setPrec(next1) <= setPrec(numChange.top()))
        {
          postfix[postfixIndex++] += numChange.top();
          numChange.pop();
        }
        numChange.push(next1);
      }
    }
    else
    {
      postfix[postfixIndex++] += token;
    }
  }
  //While the stack is not empty checks to see if the top is an ( or )
  while(!numChange.empty())
  {

    if(numChange.top() == '(' || numChange.top() == ')')
    {
      return 0;
    }
    postfix[postfixIndex++] += numChange.top();
    numChange.pop();
  }
    return postfixIndex;

}
/*
//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;

    return 0;
}*/
